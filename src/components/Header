// src/components/Header.js
import React, { useState, useEffect } from 'react';
import websiteLogo from '../Track My IPO - Logo.png';

const Header = ({
  searchTerm,
  setSearchTerm,
  layoutMode,
  setLayoutMode,
  setShowAboutUsModal,
  setShowContactUsModal,
  setIsSidebarOpen,
  isSidebarOpen,
  totalIposCount,
  currentMainboardCount,
  currentSmeCount,
  refreshData,
  sortConfig,
  sortBy,
  ipoTypeFilter,
  setIpoTypeFilter,
  statusFilter,
  setStatusFilter,
}) => {
  const [showSortDropdown, setShowSortDropdown] = useState(false);
  const [isFooterExpanded, setIsFooterExpanded] = useState(true);

  // --- CSS for bounce animation ---
  const bounceAnimationCss = `
    @keyframes bounce-once {
      0%, 100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-5px); /* Small upward bounce */
      }
    }
    .animate-bounce-once {
      animation: bounce-once 0.5s ease-in-out;
    }
  `;

  return (
    <>
      <style>{bounceAnimationCss}</style>
      <header className="fixed top-0 w-full z-50 bg-gradient-to-r from-blue-600 to-purple-700 text-white p-1 sm:p-2 shadow-lg rounded-b-xl">
        <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center">
          {/* Mobile Top Row: Hamburger, Logo, Title */}
          <div className="flex w-full sm:w-auto justify-between items-center sm:mb-0">
            {/* Mobile: Hamburger Icon */}
            <div className="sm:hidden">
              <button onClick={() => setIsSidebarOpen(true)} className="p-2 -ml-2 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-white">
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"></path>
                </svg>
              </button>
            </div>

            {/* Logo and Title */}
            <div className="flex items-center flex-grow sm:flex-grow-0 justify-center sm:justify-start">
              <img
                src={websiteLogo}
                alt="Website Logo"
                className="w-12 h-12 sm:w-16 sm:h-16 mr-2 sm:mr-4 object-contain"
                onError={(e) => { e.target.onerror = null; e.target.src = "[https://placehold.co/40x40/000000/FFFFFF?text=Logo](https://placehold.co/40x40/000000/FFFFFF?text=Logo)"; }}
              />
              <h1 className="text-lg sm:text-xl font-bold whitespace-nowrap text-center flex-grow">Track My IPO</h1>
            </div>

            {/* Desktop Search Bar & Buttons */}
            <div className="hidden sm:flex items-center flex-grow justify-end gap-2">
              <div className="relative flex-grow max-w-xl">
                <input
                  type="text"
                  id="searchInputDesktop"
                  placeholder="Search IPOs..."
                  className="w-full py-1.5 pl-9 pr-3 rounded-lg bg-white bg-opacity-20 text-white placeholder-white focus:outline-none focus:ring-2 focus:ring-white text-sm"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <svg className="absolute left-2.5 top-1/2 transform -translate-y-1/2 text-white w-5 h-5" width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd"></path>
                </svg>
              </div>
              <button
                onClick={() => setLayoutMode(layoutMode === 'card' ? 'table' : 'card')}
                className="bg-white text-blue-700 font-bold py-1.5 px-3 rounded-lg shadow-md hover:bg-blue-100 transition duration-300 ease-in-out text-sm whitespace-nowrap"
              >
                Switch to {layoutMode === 'card' ? 'Table' : 'Card'} View
              </button>
              <button onClick={() => setShowAboutUsModal(true)} className="bg-white text-blue-700 font-bold py-1.5 px-3 rounded-lg shadow-md hover:bg-blue-100 transition duration-300 ease-in-out text-sm whitespace-nowrap">
                About Us
              </button>
            </div>
          </div>

          {/* Mobile Second Row: Search Bar & Switch View Button */}
          <div className="flex w-full sm:hidden items-center gap-2 -mt-1 mb-1">
            <div className="relative flex-grow">
              <input
                type="text"
                id="searchInputMobile"
                placeholder="Search IPOs..."
                className="w-full p-1 pl-7 rounded-lg bg-white bg-opacity-20 text-white placeholder-white focus:outline-none focus:ring-2 focus:ring-white text-xs"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <svg className="absolute left-1.5 top-1/2 transform -translate-y-1/2 text-white w-3.5 h-3.5" width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd"></path>
              </svg>
            </div>
            <button onClick={() => setLayoutMode(layoutMode === 'card' ? 'table' : 'card')} className="flex-shrink-0 bg-white text-blue-700 font-bold py-1 px-2 rounded-lg shadow-md hover:bg-blue-100 transition duration-300 ease-in-out text-xs whitespace-nowrap">
              Switch to {layoutMode === 'card' ? 'Table' : 'Card'} View
            </button>
          </div>
        </div>
      </header>

      {/* Mobile Sidebar (Drawer) */}
      <div className={`fixed inset-y-0 left-0 w-64 bg-blue-800 text-white z-50 transform ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'} transition-transform duration-300 ease-in-out sm:hidden`}>
        <div className="p-4 flex justify-between items-center border-b border-blue-700">
          <h2 className="text-xl font-bold">Navigation</h2>
          <button onClick={() => setIsSidebarOpen(false)} className="text-white text-2xl">
            &times;
          </button>
        </div>
        <nav className="p-4 space-y-2">
          <button onClick={() => { setShowAboutUsModal(true); setIsSidebarOpen(false); }} className="block w-full text-left py-2 px-3 rounded-md hover:bg-blue-700 transition-colors">
            About Us
          </button>
          <button onClick={() => { setShowContactUsModal(true); setIsSidebarOpen(false); }} className="block w-full text-left py-2 px-3 rounded-md hover:bg-blue-700 transition-colors">
            Contact Us
          </button>
        </nav>
      </div>
      {isSidebarOpen && <div className="fixed inset-0 bg-black bg-opacity-50 z-40 sm:hidden" onClick={() => setIsSidebarOpen(false)}></div>}

      <div className="fixed top-[92px] sm:top-[80px] w-full z-40 bg-gray-200 p-1.5 sm:p-2 shadow-md flex flex-col sm:flex-row justify-between items-center text-gray-700 text-xs sm:text-sm">
        <div className="mb-1 sm:mb-0 text-center sm:text-left text-xs sm:text-sm">
          Total IPOs: {totalIposCount} (Current: {currentMainboardCount} | SME: {currentSmeCount})
        </div>
        <div className="flex gap-1 sm:gap-2 items-center flex-wrap justify-center sm:flex-nowrap">
          <button onClick={refreshData} className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-2 rounded-lg transition duration-300 ease-in-out text-xs whitespace-nowrap">
            Refresh
          </button>
          <div className="relative sm:hidden">
            <button onClick={() => setShowSortDropdown(!showSortDropdown)} className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-2 rounded-lg transition duration-300 ease-in-out text-xs whitespace-nowrap flex items-center">
              Sort
              <svg className={`w-3 h-3 ml-1 transform transition-transform duration-200 ${showSortDropdown ? 'rotate-180' : 'rotate-0'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            {showSortDropdown && (
              <div className="absolute top-full left-0 mt-1 bg-white rounded-lg shadow-lg z-50 py-1 w-32 min-w-max">
                <button onClick={() => { sortBy("Name"); setShowSortDropdown(false); }} className="block w-full text-left px-3 py-1 text-sm text-gray-700 hover:bg-gray-100">
                  Name {getSortDirection(sortConfig, "Name")}
                </button>
                <button onClick={() => { sortBy("Open"); setShowSortDropdown(false); }} className="block w-full text-left px-3 py-1 text-sm text-gray-700 hover:bg-gray-100">
                  Open Date {getSortDirection(sortConfig, "Open")}
                </button>
              </div>
            )}
          </div>
          <button onClick={() => sortBy("Name")} className="hidden sm:block bg-blue-500 hover:bg-blue-600 text-white font-bold py-0.5 px-1 rounded-lg transition duration-300 ease-in-out text-[0.65rem] whitespace-nowrap">
            Sort by Name {getSortDirection(sortConfig, "Name")}
          </button>
          <button onClick={() => sortBy("Open")} className="hidden sm:block bg-blue-500 hover:bg-blue-600 text-white font-bold py-0.5 px-1 rounded-lg transition duration-300 ease-in-out text-[0.65rem] whitespace-nowrap">
            Sort by Open Date {getSortDirection(sortConfig, "Open")}
          </button>
          <div className="flex items-center gap-1 ml-2 flex-wrap sm:flex-nowrap">
            <label className="inline-flex items-center"><input type="radio" className="form-radio text-blue-600" name="ipoType" value="All" checked={ipoTypeFilter === 'All'} onChange={(e) => setIpoTypeFilter(e.target.value)} /><span className="ml-1 text-gray-700 text-xs whitespace-nowrap">All</span></label>
            <label className="inline-flex items-center"><input type="radio" className="form-radio text-blue-600" name="ipoType" value="Main Board" checked={ipoTypeFilter === 'Main Board'} onChange={(e) => setIpoTypeFilter(e.target.value)} /><span className="ml-1 text-gray-700 text-xs whitespace-nowrap">Mainboard</span></label>
            <label className="inline-flex items-center"><input type="radio" className="form-radio text-blue-600" name="ipoType" value="SME" checked={ipoTypeFilter === 'SME'} onChange={(e) => setIpoTypeFilter(e.target.value)} /><span className="ml-1 text-gray-700 text-xs whitespace-nowrap">SME</span></label>
          </div>
          <div className="flex items-center gap-1 ml-2 flex-wrap sm:flex-nowrap">
            <label className="inline-flex items-center"><input type="radio" className="form-radio text-blue-600" name="statusFilter" value="All" checked={statusFilter === 'All'} onChange={(e) => setStatusFilter(e.target.value)} /><span className="ml-1 text-gray-700 text-xs whitespace-nowrap">All</span></label>
            <label className="inline-flex items-center"><input type="radio" className="form-radio text-blue-600" name="statusFilter" value="Current" checked={statusFilter === 'Current'} onChange={(e) => setStatusFilter(e.target.value)} /><span className="ml-1 text-gray-700 text-xs whitespace-nowrap">Current</span></label>
            <label className="inline-flex items-center"><input type="radio" className="form-radio text-blue-600" name="statusFilter" value="Upcoming" checked={statusFilter === 'Upcoming'} onChange={(e) => setStatusFilter(e.target.value)} /><span className="ml-1 text-gray-700 text-xs whitespace-nowrap">Upcoming</span></label>
          </div>
        </div>
      </div>
    </>
  );
};

export default Header;
