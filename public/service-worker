// public/service-worker.js
// A service worker is a script that your browser runs in the background, separate from a web page.
// It enables features like push notifications and offline access.
// This file must be placed in the root of your project's public directory.

// IMPORTANT: In a real-world application, this service worker would communicate with a server
// to get the actual notification data. For this example, we will just show a generic message.

self.addEventListener('push', event => {
    // Check if the event has data
    const data = event.data ? event.data.json() : {
        title: 'New IPO Update!',
        body: 'A new IPO has been announced or an IPO status has changed. Check it out!',
        icon: '/Track My IPO - Logo.png'
    };

    // Show the notification
    const options = {
        body: data.body,
        icon: data.icon,
        badge: data.icon, // A smaller icon for some mobile platforms
        vibrate: [200, 100, 200],
        data: {
            url: data.url || self.location.origin // Link to open when the user clicks the notification
        },
        actions: [
            { action: 'open', title: 'View IPOs' }
        ]
    };

    event.waitUntil(
        self.registration.showNotification(data.title, options)
    );
});

self.addEventListener('notificationclick', event => {
    event.notification.close();

    // Check if a custom action was clicked
    if (event.action === 'open') {
        const urlToOpen = event.notification.data.url;
        event.waitUntil(
            clients.openWindow(urlToOpen)
        );
    } else {
        // Default action: open the website's homepage
        event.waitUntil(
            clients.openWindow(self.location.origin)
        );
    }
});

// A basic 'install' event listener to cache some assets.
// This is not strictly necessary for push notifications but is a good practice.
self.addEventListener('install', event => {
    console.log('Service Worker installing.');
    event.waitUntil(
        caches.open('ipo-tracker-cache-v1').then(cache => {
            return cache.addAll([
                '/',
                '/index.html',
                '/Track My IPO - Logo.png'
                // Add other critical assets here
            ]);
        })
    );
});

self.addEventListener('activate', event => {
    console.log('Service Worker activating.');
    // Clean up old caches
    const cacheWhitelist = ['ipo-tracker-cache-v1'];
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cacheName => {
                    if (cacheWhitelist.indexOf(cacheName) === -1) {
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});
