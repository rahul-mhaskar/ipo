import React from "react";

const TableView = ({
  currentIpos = [],
  upcomingIpos = [],
  listedIpos = [],
  sortBy,
  sortConfig,
  getStatusContent,
  tableHeaders = [],
}) => {
  const renderTableSection = (title, ipoList, toggleVisibilityKey) => {
    const [isVisible, setIsVisible] = React.useState(true);

    return (
      <div className="mb-8">
        <div
          className="flex items-center justify-between bg-blue-100 p-3 rounded-t-lg cursor-pointer hover:bg-blue-200"
          onClick={() => setIsVisible((prev) => !prev)}
        >
          <h3 className="text-lg font-semibold text-blue-800">
            {title} ({ipoList.length})
          </h3>
          <svg
            className={`w-6 h-6 text-blue-800 transform transition-transform duration-200 ${
              isVisible ? "rotate-0" : "-rotate-90"
            }`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </div>

        <div
          className={`overflow-hidden transition-all duration-300 ease-in-out ${
            isVisible ? "max-h-screen opacity-100" : "max-h-0 opacity-0"
          }`}
        >
          {ipoList.length > 0 ? (
            <div className="overflow-x-auto border-t border-gray-200">
              <table className="w-full text-sm bg-white rounded-b-lg shadow-sm">
                <thead className="bg-gray-50">
                  <tr>
                    {tableHeaders.map((header) => (
                      <th
                        key={header}
                        onClick={() => sortBy(header)}
                        className="px-3 py-2 cursor-pointer text-left border-b border-gray-200 text-gray-700 whitespace-nowrap"
                      >
                        {header}
                        <span className={sortConfig.key === header ? "text-black" : "text-gray-400"}>
                          {sortConfig.key === header
                            ? sortConfig.direction === "asc"
                              ? " ▲"
                              : " ▼"
                            : " ⬍"}
                        </span>
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {ipoList.map((ipo, index) => (
                    <tr
                      key={index}
                      className="border-t border-gray-100 hover:bg-gray-50"
                    >
                      {tableHeaders.map((key) => (
                        <td
                          key={key}
                          className="px-3 py-2 border-b border-gray-100 whitespace-nowrap"
                        >
                          {key === "Status"
                            ? getStatusContent(ipo[key], ipo)
                            : ipo[key] || "N/A"}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className="px-3 py-4 text-center text-gray-600 bg-white rounded-b-lg">
              No IPOs in this category.
            </p>
          )}
        </div>
      </div>
    );
  };

  return (
    <div>
      {renderTableSection("Current IPOs", currentIpos, "current")}
      {renderTableSection("Upcoming IPOs", upcomingIpos, "upcoming")}
      {renderTableSection("Listed/Closed IPOs", listedIpos, "listed")}

      {currentIpos.length === 0 &&
        upcomingIpos.length === 0 &&
        listedIpos.length === 0 && (
          <p className="px-3 py-4 text-center text-gray-600 bg-white rounded-lg shadow-sm">
            No IPOs found matching your criteria across all categories.
          </p>
        )}
    </div>
  );
};

export default TableView;
