import { useCallback, useEffect, useMemo, useState } from "react";
import Papa from "papaparse";

const GOOGLE_SHEET_URL =
  "https://docs.google.com/spreadsheets/d/e/2PACX-1vSHEORz3aArzaDTOWYW6FlC1avk1TYKAhDKfyALmqg2HMDWiD60N6WG2wgMlPkvLWC9d7YzwplhCStb/pub?output=csv";

const useIpoData = () => {
  const [ipoData, setIpoData] = useState([]);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: "asc" });
  const [searchTerm, setSearchTerm] = useState("");
  const [layoutMode, setLayoutMode] = useState("card");
  const [ipoTypeFilter, setIpoTypeFilter] = useState("All");
  const [statusFilter, setStatusFilter] = useState("All");
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [loadingText, setLoadingText] = useState("Initializing...");
  const [message, setMessage] = useState("");
  const [showMessageBox, setShowMessageBox] = useState(false);
  const [selectedIpoDetails, setSelectedIpoDetails] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [showBrokerPopup, setShowBrokerPopup] = useState(false);
  const [showAllotmentPopup, setShowAllotmentPopup] = useState(false);
  const [allotmentLinks, setAllotmentLinks] = useState([]);
  const [showAboutUsModal, setShowAboutUsModal] = useState(false);
  const [showContactUsModal, setShowContactUsModal] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isFooterExpanded, setIsFooterExpanded] = useState(true);

  const tableHeaders = useMemo(
    () => [
      "Name",
      "Type",
      "Status",
      "GMP",
      "Subscription",
      "Price",
      "Est Listing",
      "IPO Size",
      "Lot",
      "Open",
      "Close",
      "BoA Dt",
      "Listing",
    ],
    []
  );

  const bounceAnimationCss = `
    @keyframes bounce-once {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }
    .animate-bounce-once {
      animation: bounce-once 0.5s ease-in-out;
    }
  `;

  const showMessage = useCallback((msg) => {
    setMessage(msg);
    setShowMessageBox(true);
    setTimeout(() => {
      setShowMessageBox(false);
      setMessage("");
    }, 1500);
  }, []);

  const parseDateForSort = (value) => {
    const parsed = Date.parse(value);
    return isNaN(parsed) ? null : new Date(parsed);
  };

  const sortBy = (key) => {
    let direction = "asc";
    if (sortConfig.key === key && sortConfig.direction === "asc") {
      direction = "desc";
    }
    setSortConfig({ key, direction });
  };

  const handleViewDetailsClick = (ipo) => {
    setSelectedIpoDetails(ipo);
    setShowDetailsModal(true);
  };

  const closeDetailsModal = () => {
    setShowDetailsModal(false);
    setSelectedIpoDetails(null);
  };

  const handleApplyClick = () => setShowBrokerPopup(true);

  const handleAllotmentClick = (ipo) => {
    const links = [];
    if (ipo.AllotmentLink1) {
      links.push({ name: "BSE", url: "https://www.bseindia.com/investors/appli_check.aspx" });
      links.push({ name: "NSE", url: "https://www.nseindia.com/products/dynaContent/equities/ipos/ipo_login.jsp" });
      links.push({ name: "Registrar Link", url: ipo.AllotmentLink1 });
    }
    setAllotmentLinks(links);
    setShowAllotmentPopup(true);
  };

  const getStatusContent = (status, ipo) => {
    const cleanStatus = status?.toLowerCase() || "";
    if (cleanStatus.includes("apply")) {
      return <span className="text-blue-600 font-semibold cursor-pointer hover:underline" onClick={handleApplyClick}>ðŸš€ {status}</span>;
    } else if (cleanStatus.includes("allotment")) {
      return <span className="text-green-600 font-semibold cursor-pointer hover:underline" onClick={() => handleAllotmentClick(ipo)}>âœ… {status}</span>;
    } else if (cleanStatus.includes("listed")) {
      return <span className="text-indigo-700 font-semibold">ðŸ“ˆ {status}</span>;
    }
    return <span className="text-gray-500 font-semibold">ðŸ“… {status}</span>;
  };

  const renderBrokerLinks = () => {
    const brokers = [
      {
        name: "Zerodha",
        href: "https://zerodha.com/open-account?c=VCB643",
        logo: "https://zerodha.com/static/images/logo.svg",
      },
      {
        name: "Upstox",
        href: "https://upstox.onelink.me/0H1s/4LAYGW",
        logo: "https://assets.upstox.com/website/images/upstox-new-logo.svg",
      },
      {
        name: "Paytm Money",
        href: "https://paytmmoney.page.link/DSwSvdhoasovQYLz9",
        logo: "https://play-lh.googleusercontent.com/nXCY9Did341stoQEhCEH5wJW2FBybZYbpiYl2J-eCajYOXZ_XXXHX1ptjATuA0zayg",
      },
    ];
    return brokers.map((broker, idx) => (
      <a
        key={idx}
        href={broker.href}
        target="_blank"
        rel="noopener noreferrer"
        onClick={() => showMessage(`Opening ${broker.name} account link.`)}
        className="flex flex-col items-center w-20 sm:w-24 text-center hover:scale-105 hover:shadow-lg transition-all p-1 sm:p-2 bg-gray-50 rounded-lg"
      >
        <img src={broker.logo} alt={broker.name} className="h-6 sm:h-8 mb-0.5 object-contain" />
        <span className="text-xs text-gray-600">{broker.name}</span>
      </a>
    ));
  };

  useEffect(() => {
    let progressInterval;
    let currentProgress = 0;
    const startProgressSimulation = () => {
      if (progressInterval) clearInterval(progressInterval);
      progressInterval = setInterval(() => {
        currentProgress = Math.min(currentProgress + Math.random() * 10, 95);
        setLoadingProgress(Math.floor(currentProgress));
        setLoadingText(
          currentProgress < 30
            ? "Connecting to data source..."
            : currentProgress < 70
            ? "Fetching IPO records..."
            : "Processing data..."
        );
      }, 200);
    };

    setIsLoading(true);
    setLoadingProgress(0);
    setLoadingText("Loading IPO data...");
    startProgressSimulation();

    Papa.parse(GOOGLE_SHEET_URL, {
      download: true,
      header: true,
      complete: (result) => {
        clearInterval(progressInterval);
        const cleanedData = result.data.filter((row) => row.Name && row.Name.trim() !== "");
        setIpoData(cleanedData);
        setLoadingProgress(100);
        setLoadingText("Data loaded successfully!");
        setTimeout(() => setIsLoading(false), 300);
        showMessage("IPO data loaded successfully!");
      },
      error: (error) => {
        clearInterval(progressInterval);
        setLoadingProgress(0);
        setLoadingText(`Error: ${error.message}`);
        setTimeout(() => setIsLoading(false), 2000);
        showMessage(`Failed to load IPO data: ${error.message}`);
      },
    });

    return () => clearInterval(progressInterval);
  }, [refreshTrigger, showMessage]);

  const displayedIpoData = useMemo(() => {
    let data = [...ipoData];
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      data = data.filter(
        (ipo) =>
          ipo.Name?.toLowerCase().includes(term) ||
          ipo.Status?.toLowerCase().includes(term) ||
          ipo.Type?.toLowerCase().includes(term)
      );
    }
    if (ipoTypeFilter !== "All") {
      data = data.filter((ipo) =>
        ipo.Type?.toLowerCase().includes(ipoTypeFilter.toLowerCase())
      );
    }
    return data;
  }, [ipoData, searchTerm, ipoTypeFilter]);

  const sortedData = useMemo(() => {
    if (!sortConfig.key) return ipoData;
    return [...ipoData].sort((a, b) => {
      const aVal = a[sortConfig.key] || "";
      const bVal = b[sortConfig.key] || "";
      const dateKeys = ["Open", "Close", "BoA Dt", "Listing"];
      if (dateKeys.includes(sortConfig.key)) {
        const aDate = parseDateForSort(aVal);
        const bDate = parseDateForSort(bVal);
        if (!aDate || !bDate) return 0;
        return sortConfig.direction === "asc" ? aDate - bDate : bDate - aDate;
      }
      return sortConfig.direction === "asc"
        ? String(aVal).localeCompare(String(bVal))
        : String(bVal).localeCompare(String(aVal));
    });
  }, [ipoData, sortConfig]);

  const currentIpos = sortedData.filter((ipo) =>
    ipo.Status?.toLowerCase().includes("apply")
  );
  const upcomingIpos = sortedData.filter((ipo) =>
    ipo.Status?.toLowerCase().includes("upcoming")
  );
  const listedIpos = sortedData.filter((ipo) =>
    ipo.Status?.toLowerCase().includes("listed")
  );

  const currentMainboardCount = currentIpos.filter((ipo) =>
    ipo.Type?.toLowerCase().includes("main board")
  ).length;
  const currentSmeCount = currentIpos.filter((ipo) =>
    ipo.Type?.toLowerCase().includes("sme")
  ).length;

  return {
    isLoading,
    loadingProgress,
    loadingText,
    ipoData,
    currentIpos,
    upcomingIpos,
    listedIpos,
    sortConfig,
    layoutMode,
    displayedIpoData,
    state: {
      message,
      showMessageBox,
      searchTerm,
      layoutMode,
      ipoTypeFilter,
      statusFilter,
      selectedIpoDetails,
      showDetailsModal,
      showBrokerPopup,
      showAllotmentPopup,
      allotmentLinks,
      showAboutUsModal,
      showContactUsModal,
      isSidebarOpen,
      isFooterExpanded,
      tableHeaders,
      bounceAnimationCss,
      currentMainboardCount,
      currentSmeCount,
    },
    actions: {
      setSearchTerm,
      setLayoutMode,
      setIpoTypeFilter,
      setStatusFilter,
      setRefreshTrigger,
      sortBy,
      showMessage,
      setShowDetailsModal,
      setShowBrokerPopup,
      setShowAllotmentPopup,
      setShowAboutUsModal,
      setShowContactUsModal,
      setIsSidebarOpen,
      setIsFooterExpanded,
      handleViewDetailsClick,
      handleApplyClick,
      handleAllotmentClick,
      closeDetailsModal,
      getStatusContent,
      renderBrokerLinks,
    },
  };
};

export default useIpoData;
