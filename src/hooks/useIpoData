import { useState, useEffect, useMemo } from 'react';
import { parseDateForSort, getStatusContent } from '../utils/utils';

// This is a placeholder URL for the Google Sheet. You should replace this with your actual sheet URL.
// The URL should be for the published CSV version of the sheet.
const GOOGLE_SHEET_CSV_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRlsMurbsXT2UBQ2ADbyoiQtLUTznQU4vNzw3nS02_StSrFV9pkrnXOrNAjV_Yj-Byc_zw72z_rM0tQ/pub?output=csv';

const useIpoData = ({
  searchTerm,
  ipoTypeFilter,
  statusFilter,
  layoutMode,
  sortConfig,
  setAllotmentLinks,
  setShowAllotmentPopup,
  setShowBrokerPopup,
}) => {
  // State for the hook
  const [ipoData, setIpoData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [loadingText, setLoadingText] = useState('Fetching IPO data...');
  const [message, setMessage] = useState('');
  const [showMessageBox, setShowMessageBox] = useState(false);

  // A function to show a temporary message box
  const showMessage = (text) => {
    setMessage(text);
    setShowMessageBox(true);
  };

  // Function to refresh data from Google Sheets
  const refreshData = async () => {
    setIsLoading(true);
    setLoadingProgress(0);
    setLoadingText('Fetching the latest IPO data...');
    try {
      const response = await fetch(GOOGLE_SHEET_URL);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const text = await response.text();
      const rows = text.split('\n').slice(1).filter(row => row.trim() !== '');
      const headers = text.split('\n')[0].split(',').map(header => header.trim().replace(/"/g, ''));
      const parsedData = rows.map(row => {
        const values = row.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/);
        const ipo = {};
        headers.forEach((header, index) => {
          ipo[header] = values[index] ? values[index].replace(/"/g, '').trim() : '';
        });
        return ipo;
      });

      // Filter out invalid data (e.g., rows with missing 'Name')
      const validData = parsedData.filter(ipo => ipo.Name);

      setIpoData(validData);
      setLoadingProgress(100);
      setLoadingText('Data loaded!');
      setTimeout(() => setIsLoading(false), 500); // Hide splash screen after a short delay
      showMessage('IPO data refreshed successfully!');
    } catch (error) {
      console.error("Failed to fetch IPO data:", error);
      showMessage('Failed to fetch data. Please check your network and sheet URL.');
      setLoadingText('Failed to load data.');
      setTimeout(() => setIsLoading(false), 500);
    }
  };

  useEffect(() => {
    refreshData();
  }, []);

  // Filter and sort the IPO data
  const displayedIpoData = useMemo(() => {
    let filteredData = ipoData;

    // Search term filter
    if (searchTerm) {
      filteredData = filteredData.filter(ipo =>
        Object.values(ipo).some(value =>
          String(value).toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
    }

    // IPO Type Filter
    if (ipoTypeFilter !== 'All') {
      filteredData = filteredData.filter(ipo => {
        const type = ipo['IPO Type'] ? ipo['IPO Type'].toLowerCase() : '';
        return ipoTypeFilter.toLowerCase() === type;
      });
    }

    // Status Filter
    if (statusFilter !== 'All') {
      filteredData = filteredData.filter(ipo => {
        const status = ipo.Status ? ipo.Status.toLowerCase() : '';
        const statusText = getStatusContent(status);
        return statusText.toLowerCase() === statusFilter.toLowerCase();
      });
    }

    // Sort the data
    if (sortConfig.key) {
      filteredData = [...filteredData].sort((a, b) => {
        const aValue = a[sortConfig.key];
        const bValue = b[sortConfig.key];

        // Handle numeric and date sorting
        let compareValue;
        if (sortConfig.key.includes('Date')) {
          compareValue = parseDateForSort(aValue) - parseDateForSort(bValue);
        } else if (!isNaN(parseFloat(aValue)) && !isNaN(parseFloat(bValue))) {
          compareValue = parseFloat(aValue) - parseFloat(bValue);
        } else {
          compareValue = String(aValue).localeCompare(String(bValue));
        }

        return sortConfig.direction === 'asc' ? compareValue : -compareValue;
      });
    }

    return filteredData;
  }, [ipoData, searchTerm, ipoTypeFilter, statusFilter, sortConfig]);

  // Separate IPOs into categories for table view
  const { upcomingIpos, currentIpos, listedIpos } = useMemo(() => {
    const upcoming = [];
    const current = [];
    const listed = [];
    const now = new Date();

    displayedIpoData.forEach(ipo => {
      const openDate = new Date(ipo['Open Date']);
      const closeDate = new Date(ipo['Close Date']);
      const status = ipo.Status ? ipo.Status.toLowerCase() : '';

      if (status.includes('listed')) {
        listed.push(ipo);
      } else if (openDate > now) {
        upcoming.push(ipo);
      } else if (closeDate >= now) {
        current.push(ipo);
      } else {
        listed.push(ipo);
      }
    });

    return { upcomingIpos: upcoming, currentIpos: current, listedIpos: listed };
  }, [displayedIpoData]);

  // Handle various click actions
  const handleApplyClick = (ipo) => {
    if (ipo['Apply Link']) {
      window.open(ipo['Apply Link'], '_blank');
    } else {
      setShowBrokerPopup(true);
    }
  };

  const handleAllotmentClick = (ipo) => {
    const links = [];
    if (ipo['Allotment Link 1']) links.push(ipo['Allotment Link 1']);
    if (ipo['Allotment Link 2']) links.push(ipo['Allotment Link 2']);
    if (ipo['Allotment Link 3']) links.push(ipo['Allotment Link 3']);
    if (links.length > 0) {
      setAllotmentLinks(links);
      setShowAllotmentPopup(true);
    } else {
      showMessage('No allotment link available for this IPO yet.');
    }
  };
  
  const handleViewDetailsClick = (ipoName) => {
    window.location.hash = `#/ipo/${encodeURIComponent(ipoName.replace(/\s/g, '-'))}`;
  };

  const totalIposCount = ipoData.length;
  const currentMainboardCount = currentIpos.filter(ipo => ipo['IPO Type'].toLowerCase() === 'mainboard').length;
  const currentSmeCount = currentIpos.filter(ipo => ipo['IPO Type'].toLowerCase() === 'sme').length;

  // Return all the state and functions for the App component to use
  return {
    ipoData,
    isLoading,
    loadingProgress,
    loadingText,
    message,
    showMessageBox,
    showMessage,
    setShowMessageBox,
    refreshData,
    upcomingIpos,
    currentIpos,
    listedIpos,
    totalIposCount,
    currentMainboardCount,
    currentSmeCount,
    displayedIpoData,
    handleApplyClick,
    handleAllotmentClick,
    handleViewDetailsClick,
  };
};

export default useIpoData;
